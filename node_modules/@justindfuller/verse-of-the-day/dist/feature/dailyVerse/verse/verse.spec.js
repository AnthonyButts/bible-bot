'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _proxyquire = require('proxyquire');

var _proxyquire2 = _interopRequireDefault(_proxyquire);

var _verse = require('./verse');

var _verse2 = _interopRequireDefault(_verse);

var _text = require('./../../../utility/text/text');

var _text2 = _interopRequireDefault(_text);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function getMocks() {
  var mocks = {
    getRandomNumber: _sinon2.default.stub(),
    setHash: _sinon2.default.spy(),
    getHash: _sinon2.default.stub(),
    cache: _sinon2.default.stub(),
    fetch: _sinon2.default.stub()
  };
  mocks.cache.returns({ setHash: mocks.setHash, getHash: mocks.getHash });
  var verse = (0, _proxyquire2.default)('./verse', {
    './../../../utility/math/math': mocks.getRandomNumber,
    './../../../utility/fetch/fetch': mocks.fetch
  });
  mocks.verse = verse(mocks.cache);
  return mocks;
}

(0, _ava2.default)('If verse number is not a number it sets a new number.', function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(t) {
    var mocks, setHashArgs;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mocks = getMocks();

            mocks.getRandomNumber.returns(1);
            _context.next = 4;
            return mocks.verse.setVerseNumber(null, 'TestCacheKey', 6);

          case 4:
            t.true(mocks.cache.called);
            t.true(mocks.getRandomNumber.calledWith(6));
            t.true(mocks.setHash.called);
            setHashArgs = mocks.setHash.getCall(0).args;

            t.is(setHashArgs[0], 'TestCacheKey');
            t.is(setHashArgs[1].newVerseNumber, 1);

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

(0, _ava2.default)("It returns the verse number when it's already set", function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(t) {
    var mocks, res;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            mocks = getMocks();
            _context2.next = 3;
            return mocks.verse.setVerseNumber(7);

          case 3:
            res = _context2.sent;

            t.true(mocks.cache.called);
            t.false(mocks.getRandomNumber.called);
            t.false(mocks.setHash.called);
            t.is(res, 7);

          case 8:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());

(0, _ava2.default)('It does not throw any errors using the default cache.', function (t) {
  t.notThrows(_verse2.default);
});

(0, _ava2.default)('GetVerseNumber returns the key from cache', function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(t) {
    var mocks, res;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            mocks = getMocks();

            mocks.getHash.returns({ newVerseNumber: 5 });
            _context3.next = 4;
            return mocks.verse.getVerseNumber();

          case 4:
            res = _context3.sent;

            t.is(res, 5);

          case 6:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}());

(0, _ava2.default)('pickVerse gets a random verse from the array', function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(t) {
    var mocks, array, res;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            mocks = getMocks();

            mocks.getHash.returns({ newVerseNumber: 2 });
            array = ['zero', 'one', 'two'];
            _context4.next = 5;
            return mocks.verse.pickVerse('identifier', array);

          case 5:
            res = _context4.sent;

            t.is(res, array[2]);

          case 7:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}());

(0, _ava2.default)('createVerseData combines chapter with new data', function (t) {
  var mocks = getMocks();
  var chapter = { test: 'teststring' };
  var randomVerse = {
    verse: 'versetext',
    reference: 'referencetext',
    text: 'normalizedtext'
  };
  var res = mocks.verse.createVerseData(chapter, randomVerse);
  t.is(res.test, chapter.test);
  t.is(res.verse, randomVerse.verse);
  t.is(res.reference, randomVerse.reference);
  t.is(res.text, (0, _text2.default)(randomVerse.text));
});

(0, _ava2.default)('getVerses fetches data from the API', function () {
  var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5(t) {
    var mocks, chapter, res;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            mocks = getMocks();
            chapter = { chapterID: 'chapterIDTest' };

            mocks.fetch.returns({ verses: 'TestVerses' });
            _context5.next = 5;
            return mocks.verse.getVerses(chapter);

          case 5:
            res = _context5.sent;

            t.is(res, 'TestVerses');

          case 7:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  }));

  return function (_x5) {
    return _ref5.apply(this, arguments);
  };
}());
//# sourceMappingURL=verse.spec.js.map