{"version":3,"sources":["../../../../src/feature/dailyVerse/verse/verse.spec.js"],"names":["getMocks","mocks","getRandomNumber","stub","setHash","spy","getHash","cache","fetch","returns","verse","t","setVerseNumber","true","called","calledWith","setHashArgs","getCall","args","is","newVerseNumber","res","false","notThrows","getVerseNumber","array","pickVerse","chapter","test","randomVerse","reference","text","createVerseData","chapterID","verses","getVerses"],"mappings":"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","file":"verse.spec.js","sourcesContent":["import test from 'ava';\r\nimport sinon from 'sinon';\r\nimport proxyquire from 'proxyquire';\r\nimport defaultVerse from './verse';\r\nimport normalizeText from './../../../utility/text/text';\r\n\r\nfunction getMocks() {\r\n  const mocks = {\r\n    getRandomNumber: sinon.stub(),\r\n    setHash: sinon.spy(),\r\n    getHash: sinon.stub(),\r\n    cache: sinon.stub(),\r\n    fetch: sinon.stub(),\r\n  };\r\n  mocks.cache.returns({ setHash: mocks.setHash, getHash: mocks.getHash });\r\n  const verse = proxyquire('./verse', {\r\n    './../../../utility/math/math': mocks.getRandomNumber,\r\n    './../../../utility/fetch/fetch': mocks.fetch,\r\n  });\r\n  mocks.verse = verse(mocks.cache);\r\n  return mocks;\r\n}\r\n\r\ntest('If verse number is not a number it sets a new number.', async (t) => {\r\n  const mocks = getMocks();\r\n  mocks.getRandomNumber.returns(1);\r\n  await mocks.verse.setVerseNumber(null, 'TestCacheKey', 6);\r\n  t.true(mocks.cache.called);\r\n  t.true(mocks.getRandomNumber.calledWith(6));\r\n  t.true(mocks.setHash.called);\r\n  const setHashArgs = mocks.setHash.getCall(0).args;\r\n  t.is(setHashArgs[0], 'TestCacheKey');\r\n  t.is(setHashArgs[1].newVerseNumber, 1);\r\n});\r\n\r\ntest(\"It returns the verse number when it's already set\", async (t) => {\r\n  const mocks = getMocks();\r\n  const res = await mocks.verse.setVerseNumber(7);\r\n  t.true(mocks.cache.called);\r\n  t.false(mocks.getRandomNumber.called);\r\n  t.false(mocks.setHash.called);\r\n  t.is(res, 7);\r\n});\r\n\r\ntest('It does not throw any errors using the default cache.', (t) => {\r\n  t.notThrows(defaultVerse);\r\n});\r\n\r\ntest('GetVerseNumber returns the key from cache', async (t) => {\r\n  const mocks = getMocks();\r\n  mocks.getHash.returns({ newVerseNumber: 5 });\r\n  const res = await mocks.verse.getVerseNumber();\r\n  t.is(res, 5);\r\n});\r\n\r\ntest('pickVerse gets a random verse from the array', async (t) => {\r\n  const mocks = getMocks();\r\n  mocks.getHash.returns({ newVerseNumber: 2 });\r\n  const array = ['zero', 'one', 'two'];\r\n  const res = await mocks.verse.pickVerse('identifier', array);\r\n  t.is(res, array[2]);\r\n});\r\n\r\ntest('createVerseData combines chapter with new data', (t) => {\r\n  const mocks = getMocks();\r\n  const chapter = { test: 'teststring' };\r\n  const randomVerse = {\r\n    verse: 'versetext',\r\n    reference: 'referencetext',\r\n    text: 'normalizedtext',\r\n  };\r\n  const res = mocks.verse.createVerseData(chapter, randomVerse);\r\n  t.is(res.test, chapter.test);\r\n  t.is(res.verse, randomVerse.verse);\r\n  t.is(res.reference, randomVerse.reference);\r\n  t.is(res.text, normalizeText(randomVerse.text));\r\n});\r\n\r\ntest('getVerses fetches data from the API', async (t) => {\r\n  const mocks = getMocks();\r\n  const chapter = { chapterID: 'chapterIDTest' };\r\n  mocks.fetch.returns({ verses: 'TestVerses' });\r\n  const res = await mocks.verse.getVerses(chapter);\r\n  t.is(res, 'TestVerses');\r\n});\r\n"]}