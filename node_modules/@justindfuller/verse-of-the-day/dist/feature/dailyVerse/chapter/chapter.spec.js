'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _proxyquire = require('proxyquire');

var _proxyquire2 = _interopRequireDefault(_proxyquire);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('getRandomChapter returns the cached chapter if available.', function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(t) {
    var fetch, chapter, cacheMethods, cache, _chapter, getRandomChapter, res;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fetch = _sinon2.default.stub();

            fetch.returns({ chapters: [{ chapter: 'ChapterText', id: 'chapterIDText' }] });
            chapter = (0, _proxyquire2.default)('./chapter', {
              './../../../utility/fetch/fetch': fetch
            });
            cacheMethods = {
              getHash: _sinon2.default.stub(),
              setHash: _sinon2.default.stub()
            };

            cacheMethods.getHash.returns(0);

            cache = function cache() {
              return cacheMethods;
            };

            _chapter = chapter(cache), getRandomChapter = _chapter.getRandomChapter;
            _context.next = 9;
            return getRandomChapter('identifier', {});

          case 9:
            res = _context.sent;

            t.is(res.chapter, 'ChapterText');

          case 11:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

_ava2.default.skip('getFullChapter returns the cached text if available.', function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(t) {
    var chapter, cacheMethods, cache, _chapter2, getFullChapter, res;

    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            chapter = (0, _proxyquire2.default)('./chapter', {});
            cacheMethods = {
              getHash: _sinon2.default.stub()
            };

            cacheMethods.getHash.returns('Cached Data');

            cache = function cache() {
              return cacheMethods;
            };

            _chapter2 = chapter(cache), getFullChapter = _chapter2.getFullChapter;
            _context2.next = 7;
            return getFullChapter({});

          case 7:
            res = _context2.sent;

            t.is(res, 'Cached Data');

          case 9:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());

_ava2.default.skip('getRandomChapter returns data from fetch.', function () {
  var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(t) {
    var fetch, getRandomNumber, chapter, cacheMethods, cache, _chapter3, getRandomChapter, res;

    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            fetch = _sinon2.default.stub();

            fetch.returns({ chapters: [{ chapter: 'ChapterText', id: 'chapterIDText' }] });
            getRandomNumber = _sinon2.default.stub();

            getRandomNumber.returns(0);
            chapter = (0, _proxyquire2.default)('./chapter', {
              './../../../utility/fetch/fetch': fetch,
              './../../../utility/math/math': getRandomNumber
            });
            cacheMethods = {
              getHash: _sinon2.default.stub(),
              setHash: _sinon2.default.stub()
            };

            cache = function cache() {
              return cacheMethods;
            };

            _chapter3 = chapter(cache), getRandomChapter = _chapter3.getRandomChapter;
            _context3.next = 10;
            return getRandomChapter('identifier', {});

          case 10:
            res = _context3.sent;

            t.is(res.chapter, 'ChapterText');
            t.is(res.chapterID, 'chapterIDText');
            t.true(cacheMethods.setHash.called);
            t.true(cacheMethods.getHash.called);

          case 15:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  }));

  return function (_x3) {
    return _ref3.apply(this, arguments);
  };
}());

_ava2.default.skip('getFullChapter returns data from fetch.', function () {
  var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(t) {
    var fetch, getRandomNumber, chapter, cacheMethods, cache, _chapter4, getFullChapter, res;

    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            fetch = _sinon2.default.stub();

            fetch.returns({ search: { result: { passages: [{ text: 'FullChapterText' }] } } });
            getRandomNumber = _sinon2.default.stub();

            getRandomNumber.returns(0);
            chapter = (0, _proxyquire2.default)('./chapter', {
              './../../../utility/fetch/fetch': fetch
            });
            cacheMethods = {
              getHash: _sinon2.default.stub(),
              setHash: _sinon2.default.stub()
            };

            cache = function cache() {
              return cacheMethods;
            };

            _chapter4 = chapter(cache), getFullChapter = _chapter4.getFullChapter;
            _context4.next = 10;
            return getFullChapter({});

          case 10:
            res = _context4.sent;

            t.is(res.fullText, 'FullChapterText');
            t.true(cacheMethods.setHash.called);
            t.true(cacheMethods.getHash.called);

          case 14:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  }));

  return function (_x4) {
    return _ref4.apply(this, arguments);
  };
}());
//# sourceMappingURL=chapter.spec.js.map