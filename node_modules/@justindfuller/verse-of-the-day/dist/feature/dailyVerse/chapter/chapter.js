'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _cacheKeys = require('./../../cacheKeys');

var _cacheKeys2 = _interopRequireDefault(_cacheKeys);

var _endpoints = require('./../../endpoints');

var _endpoints2 = _interopRequireDefault(_endpoints);

var _math = require('./../../../utility/math/math');

var _math2 = _interopRequireDefault(_math);

var _fetch = require('./../../../utility/fetch/fetch');

var _fetch2 = _interopRequireDefault(_fetch);

var _cache2 = require('./../../../utility/cache');

var _cache3 = _interopRequireDefault(_cache2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function chapter() {
  var getRandomChapter = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(props) {
      var chapterURL, cacheKey, res, chapters, stored, randomNumber, randomChapter, data;
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              chapterURL = (0, _endpoints2.default)(props).chapter;
              cacheKey = (0, _cacheKeys2.default)(props).chapter;
              _context.next = 4;
              return (0, _fetch2.default)(chapterURL);

            case 4:
              res = _context.sent;
              chapters = res.chapters;
              _context.next = 8;
              return getHash(cacheKey);

            case 8:
              stored = _context.sent;
              randomNumber = (0, _lodash.get)(stored, 'randomNumber') || (0, _math2.default)(chapters.length - 1);
              randomChapter = (0, _lodash.get)(chapters, '[' + randomNumber + ']', {});
              data = (0, _assign2.default)({}, props, {
                chapter: randomChapter.chapter,
                chapterID: randomChapter.id
              });

              setHash(cacheKey, { randomNumber: randomNumber });
              return _context.abrupt('return', data);

            case 14:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function getRandomChapter(_x2) {
      return _ref.apply(this, arguments);
    };
  }();

  var getFullChapter = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(book) {
      var props, url, res, data;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              props = (0, _assign2.default)({}, book, { version: book.bibleID });
              url = (0, _endpoints2.default)(props).fullChapter;
              _context2.next = 4;
              return (0, _fetch2.default)(url);

            case 4:
              res = _context2.sent;
              data = (0, _assign2.default)({}, book, {
                fullText: (0, _lodash.get)(res, 'search.result.passages[0].text')
              });
              return _context2.abrupt('return', data);

            case 7:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function getFullChapter(_x3) {
      return _ref2.apply(this, arguments);
    };
  }();

  var cache = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _cache3.default;

  var _cache = cache(),
      getHash = _cache.getHash,
      setHash = _cache.setHash;

  return {
    getRandomChapter: getRandomChapter,
    getFullChapter: getFullChapter
  };
}

module.exports = chapter;
//# sourceMappingURL=chapter.js.map