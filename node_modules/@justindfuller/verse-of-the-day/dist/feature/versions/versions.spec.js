'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _proxyquire = require('proxyquire');

var _proxyquire2 = _interopRequireDefault(_proxyquire);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('It fetches the data', function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(t) {
    var fetchMock, getListOfVersions, res;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            fetchMock = _sinon2.default.stub();

            fetchMock.returns({
              versions: [{
                id: 'TestID',
                name: 'TestName',
                lang_name: 'TestLang'
              }]
            });
            getListOfVersions = (0, _proxyquire2.default)('./versions', {
              './../../utility/fetch/fetch': fetchMock
            });
            _context.next = 5;
            return getListOfVersions();

          case 5:
            res = _context.sent;

            t.true(fetchMock.called);
            t.is(res[0].id, 'TestID');
            t.is(res[0].name, 'TestName');
            t.is(res[0].language, 'TestLang');

          case 10:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());
//# sourceMappingURL=versions.spec.js.map