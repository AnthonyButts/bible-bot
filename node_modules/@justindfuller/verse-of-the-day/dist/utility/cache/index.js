'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _client = require('./client');

var _client2 = _interopRequireDefault(_client);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function cache() {
  var getHash = function () {
    var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(key) {
      return _regenerator2.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', redisClient.hgetallAsync(key));

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    return function getHash(_x2) {
      return _ref.apply(this, arguments);
    };
  }();

  var setHash = function () {
    var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(key, value) {
      var result;
      return _regenerator2.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return redisClient.HMSETAsync(key, value);

            case 2:
              result = _context2.sent;


              if (result) {
                expireAtMidnight(key);
              }

            case 4:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee2, this);
    }));

    return function setHash(_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }();

  var client = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _client2.default;

  var redisClient = _lodash2.default.isFunction(client) ? client() : client;

  function getSecondsUntilMidnight() {
    var midnight = new Date();
    midnight.setHours(24, 0, 0, 0);
    var seconds = (midnight - Date.now()) / 1000;
    return Number(seconds.toFixed());
  }

  function expireAtMidnight(key) {
    return redisClient.expireAsync(key, getSecondsUntilMidnight());
  }

  function get(bibleID, key) {
    return getHash(bibleID + ':' + key);
  }

  function set(bibleID, key, value) {
    return setHash(bibleID + ':' + key, value);
  }

  return {
    get: get,
    set: set,
    getHash: getHash,
    setHash: setHash
  };
}

exports.default = cache;
//# sourceMappingURL=index.js.map