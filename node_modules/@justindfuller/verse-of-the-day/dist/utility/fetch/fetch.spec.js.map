{"version":3,"sources":["../../../src/utility/fetch/fetch.spec.js"],"names":["response","body","request","stub","returns","cacheObj","getHash","setHash","cache","fetch","skip","t","headers","getCall","args","true","Authorization","indexOf","res","is","invalid","fetchError","message"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW;AACfC,QAAM;AADS,CAAjB;AAGA,IAAMC,UAAU,gBAAMC,IAAN,GAAaC,OAAb,CAAqBJ,QAArB,CAAhB;AACA,IAAMK,WAAW;AACfC,WAAS,gBAAMH,IAAN,EADM;AAEfI,WAAS,gBAAMJ,IAAN;AAFM,CAAjB;AAIA,IAAMK,QAAQ,gBAAML,IAAN,EAAd;AACAK,MAAMJ,OAAN,CAAcC,QAAd;;AAEA,IAAMI,QAAQ,0BAAW,SAAX,EAAsB;AAClC,qBAAmBP,OADe;AAElC,gBAAcM;AAFoB,CAAtB,CAAd;;AAKA,cAAKE,IAAL,CAAU,iDAAV,EAA6D,UAACC,CAAD,EAAO;AAClEF,QAAM,UAAN;AACA,MAAMG,UAAUV,QAAQW,OAAR,CAAgB,CAAhB,EAAmBC,IAAnB,CAAwB,CAAxB,EAA2BF,OAA3C;AACAD,IAAEI,IAAF,CAAOH,QAAQI,aAAR,CAAsBC,OAAtB,CAA8B,OAA9B,IAAyC,CAAC,CAAjD;AACD,CAJD;;AAMA,mBAAK,uCAAL;AAAA,sFAA8C,iBAAON,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAC1BF,MAAM,UAAN,CAD0B;;AAAA;AACtCS,eADsC;;AAE5CP,cAAEQ,EAAF,CAAKD,GAAL,EAAU,eAAV;;AAF4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAA9C;;AAAA;AAAA;AAAA;AAAA;;AAKA,mBAAK,2CAAL;AAAA,uFAAkD,kBAAOP,CAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1CS,mBAD0C,GAChC,gBAAMjB,IAAN,GAAaC,OAAb,CAAqB,EAArB,CADgC;AAE1CiB,sBAF0C,GAE7B,0BAAW,SAAX,EAAsB;AACvC,iCAAmBD;AADoB,aAAtB,CAF6B;AAAA;AAAA;AAAA,mBAMxCC,YANwC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAQ9CV,cAAEQ,EAAF,CAAK,aAAEG,OAAP,EAAgB,mDAAhB;;AAR8C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlD;;AAAA;AAAA;AAAA;AAAA","file":"fetch.spec.js","sourcesContent":["import test from 'ava';\r\nimport sinon from 'sinon';\r\nimport proxyquire from 'proxyquire';\r\n\r\nconst response = {\r\n  body: '{ \"response\": \"test response\" }',\r\n};\r\nconst request = sinon.stub().returns(response);\r\nconst cacheObj = {\r\n  getHash: sinon.stub(),\r\n  setHash: sinon.stub(),\r\n};\r\nconst cache = sinon.stub();\r\ncache.returns(cacheObj);\r\n\r\nconst fetch = proxyquire('./fetch', {\r\n  'request-promise': request,\r\n  './../cache': cache,\r\n});\r\n\r\ntest.skip('Fetch calls request with Authorization headers.', (t) => {\r\n  fetch('Test URL');\r\n  const headers = request.getCall(0).args[0].headers;\r\n  t.true(headers.Authorization.indexOf('Basic') > -1);\r\n});\r\n\r\ntest('It returns the response from the body', async (t) => {\r\n  const res = await fetch('Test URL');\r\n  t.is(res, 'test response');\r\n});\r\n\r\ntest('It throws an error if response is invalid', async (t) => {\r\n  const invalid = sinon.stub().returns('');\r\n  const fetchError = proxyquire('./fetch', {\r\n    'request-promise': invalid,\r\n  });\r\n  try {\r\n    await fetchError();\r\n  } catch (e) {\r\n    t.is(e.message, 'An error occured while retrieving the verse data.');\r\n  }\r\n});\r\n"]}