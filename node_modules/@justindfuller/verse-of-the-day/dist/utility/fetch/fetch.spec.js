'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _sinon = require('sinon');

var _sinon2 = _interopRequireDefault(_sinon);

var _proxyquire = require('proxyquire');

var _proxyquire2 = _interopRequireDefault(_proxyquire);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var response = {
  body: '{ "response": "test response" }'
};
var request = _sinon2.default.stub().returns(response);
var cacheObj = {
  getHash: _sinon2.default.stub(),
  setHash: _sinon2.default.stub()
};
var cache = _sinon2.default.stub();
cache.returns(cacheObj);

var fetch = (0, _proxyquire2.default)('./fetch', {
  'request-promise': request,
  './../cache': cache
});

_ava2.default.skip('Fetch calls request with Authorization headers.', function (t) {
  fetch('Test URL');
  var headers = request.getCall(0).args[0].headers;
  t.true(headers.Authorization.indexOf('Basic') > -1);
});

(0, _ava2.default)('It returns the response from the body', function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(t) {
    var res;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return fetch('Test URL');

          case 2:
            res = _context.sent;

            t.is(res, 'test response');

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}());

(0, _ava2.default)('It throws an error if response is invalid', function () {
  var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(t) {
    var invalid, fetchError;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            invalid = _sinon2.default.stub().returns('');
            fetchError = (0, _proxyquire2.default)('./fetch', {
              'request-promise': invalid
            });
            _context2.prev = 2;
            _context2.next = 5;
            return fetchError();

          case 5:
            _context2.next = 10;
            break;

          case 7:
            _context2.prev = 7;
            _context2.t0 = _context2['catch'](2);

            t.is(_context2.t0.message, 'An error occured while retrieving the verse data.');

          case 10:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[2, 7]]);
  }));

  return function (_x2) {
    return _ref2.apply(this, arguments);
  };
}());
//# sourceMappingURL=fetch.spec.js.map