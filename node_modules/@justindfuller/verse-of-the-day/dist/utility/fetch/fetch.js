'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var fetchFromApi = function () {
  var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(url) {
    var cacheKey, cached, headers, response, json, data;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cacheKey = 'fetch:' + url;
            _context.next = 3;
            return (0, _cache2.default)().getHash(cacheKey);

          case 3:
            cached = _context.sent;
            headers = {
              url: url,
              headers: {
                Authorization: 'Basic ' + (process.env.APIKEY || '')
              },
              resolveWithFullResponse: true
            };

            if (!cached) {
              _context.next = 7;
              break;
            }

            return _context.abrupt('return', JSON.parse(cached.response));

          case 7:
            _context.t0 = cached;

            if (_context.t0) {
              _context.next = 12;
              break;
            }

            _context.next = 11;
            return (0, _nodeFetch2.default)(url, headers);

          case 11:
            _context.t0 = _context.sent;

          case 12:
            response = _context.t0;
            _context.next = 15;
            return response.json();

          case 15:
            json = _context.sent;
            data = json.response;
            _context.next = 19;
            return (0, _cache2.default)().setHash(cacheKey, { response: (0, _stringify2.default)(data) });

          case 19:
            return _context.abrupt('return', data);

          case 20:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function fetchFromApi(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _cache = require('./../cache');

var _cache2 = _interopRequireDefault(_cache);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

module.exports = fetchFromApi;
//# sourceMappingURL=fetch.js.map